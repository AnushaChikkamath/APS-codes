# -*- coding: utf-8 -*-
"""johnson_trotter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U_QyT8VlAu2EmXdD-cmrgPjjIkgLUgvU
"""

# Print all permutations using Johnson and Trotter algorithm.
LEFT_TO_RIGHT = True
RIGHT_TO_LEFT = False


def searchArr(a, n, mobile):
	for i in range(n):
		if a[i] == mobile:
			return i + 1

def getMobile(a, dir, n):
	mobile_prev = 0
	mobile = 0
	for i in range(n):
		if dir[a[i] - 1] == RIGHT_TO_LEFT and i != 0:
			if a[i] > a[i - 1] and a[i] > mobile_prev:
				mobile = a[i]
				mobile_prev = mobile
		if dir[a[i] - 1] == LEFT_TO_RIGHT and i != n - 1:
			if a[i] > a[i + 1] and a[i] > mobile_prev:
				mobile = a[i]
				mobile_prev = mobile
	if mobile == 0 and mobile_prev == 0:
		return 0
	else:
		return mobile


def printOnePerm(a, dir, n):
	mobile = getMobile(a, dir, n)
	pos = searchArr(a, n, mobile)

	if dir[a[pos - 1] - 1] == RIGHT_TO_LEFT:
		a[pos - 1], a[pos - 2] = a[pos - 2], a[pos - 1]

	elif dir[a[pos - 1] - 1] == LEFT_TO_RIGHT:
		a[pos], a[pos - 1] = a[pos - 1], a[pos]

	for i in range(n):
		if a[i] > mobile:
			if dir[a[i] - 1] == LEFT_TO_RIGHT:
				dir[a[i] - 1] = RIGHT_TO_LEFT
			elif dir[a[i] - 1] == RIGHT_TO_LEFT:
				dir[a[i] - 1] = LEFT_TO_RIGHT

	for i in range(n):
		print(a[i], end='')
	print("")


def fact(n):
	res = 1
	for i in range(1, n + 1):
		res = res * i
	return res


def printPermutation(n):
	a = [i + 1 for i in range(n)]
	for i in range(n):
		print(a[i], end='')
	print("")

	dir = [RIGHT_TO_LEFT for i in range(n)]

	for i in range(1, fact(n)):
		printOnePerm(a, dir, n)


n =int(input()) 
printPermutation(n)

