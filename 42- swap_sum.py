# -*- coding: utf-8 -*-
"""swap_sum.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U_QyT8VlAu2EmXdD-cmrgPjjIkgLUgvU
"""

"""
  Given two arrays A and B of length N.
  In one operation, you can swap A[i] with B[i].
  Return the max sum of A after performing at most K such operations. 

  Input - N=5 K=3
          A= 1 3 1 3 1
          B= 2 4 1 6 5

  Output- 17

  Input- N=3 K=1
         A= 1 5 1
         B= 3 4 2

  Output- 9

"""


from typing import *


def swapSum(k: int, a: List[int], b: List[int]) -> int:
    # write your code here
    length=len(b)
    index = list(range(length))
    ratio = [v-w for v, w in zip(b,a)]
    index.sort(key=lambda i: ratio[i], reverse=True)
    for i in index:
        if(k==0):
            break
        elif(b[i]-a[i]>0):
            a[i]=b[i]
            k=k-1
    x=sum(a)
    #print(a)
    #print(x)
    return x
    pass

n=int(input())
k=int(input())
arr1 = list(map(int, input().split()))
arr2 = list(map(int, input().split()))
ans=swapSum(k,arr1,arr2)
print(ans)

