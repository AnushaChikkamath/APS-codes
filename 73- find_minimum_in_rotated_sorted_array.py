# -*- coding: utf-8 -*-
"""find_minimum_in_rotated_sorted_array.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nfwrahhEYGANgbDN7DO3D3a-alw6Bler
"""

# Time:  O(logn)
# Space: O(1)
#
# Suppose a sorted array is rotated at some pivot unknown to you beforehand.
#
# (i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
#
# Find the minimum element.


class Solution(object):
    def findMin(self, nums):
        left, right = 0, len(nums)
        target = nums[-1]

        while left < right:
            mid = left + (right - left) // 2
            #print(mid)
            if nums[mid] <= target:
                right = mid
            else:
                left = mid + 1

        return nums[left]





if __name__ == "__main__":
    print(Solution().findMin([1]))
    print(Solution().findMin([1, 2]))
    print(Solution().findMin([2, 1]))
    print(Solution().findMin([3, 1, 2]))
    print(Solution().findMin([6, 3, 5]))

