# -*- coding: utf-8 -*-
"""power_of_numbers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U_QyT8VlAu2EmXdD-cmrgPjjIkgLUgvU
"""

"""
  Given a number and its reverse. Find that number raised to the power of its own reverse.
  As answers can be very large, print the result modulo 10^9 + 7.
  
"""

class Solution:
    
    def power(self,N,R):
        
        def fun(N,R):
            if R <= 1:
                return N
            temp = fun(N,R//2) % (1000000007)
            temp = (temp * temp) % (1000000007)
            if R % 2 == 0:
                return temp % (1000000007)
            else:
                return (N * temp) % (1000000007)
        
        return fun(N,R)      
            
            
        
x=int(input())
num=x
reversed_num = 0
while num != 0:
    digit = num % 10
    reversed_num = reversed_num * 10 + digit
    num //= 10
ob=Solution()
ans=ob.power(x,reversed_num)
print(ans)

