# -*- coding: utf-8 -*-
"""sum_of_distances.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U_QyT8VlAu2EmXdD-cmrgPjjIkgLUgvU
"""

"""
  Given a 0-indexed integer array nums. There exists an array arr of length nums.length, 
  where arr[i] is the sum of |i - j| over all j such that nums[j] == nums[i] and j != i. 
  If there is no such j, set arr[i] to be 0.
  Return the array arr.

  Input: nums = [1,3,1,1,2]
  Output: [5,0,3,4,0]

  Input: nums = [0,5,3]
  Output: [0,0,0]

"""
"""
1. Create a dictionary num_indices to store the index of each unique element in the input array nums.
2. Also, create a dictionary occ to store the number of occurrences of each unique element in the input array nums.
3. Iterate through nums, and for each element, update num_indices and occ.
4. Create an empty array arr of the same length as nums.
5. Iterate through nums again, and for each element, calculate the sum of absolute differences using the values from num_indices and occ, and store it in arr.
6. Finally, return the arr array.

"""

import math
import time
from typing import List

class Solution:
    def distance(self, nums: List[int]) -> List[int]:
        num_indices = dict()
        occ=dict()
        for i, num in enumerate(nums):
            if num not in num_indices:
                num_indices[num] = i
                occ[num]=1
            else:
                num_indices[num]=num_indices[num]+i
                occ[num]=occ[num]+1
        arr = [0] * len(nums)
        n=len(nums)
        for i in range(n):
            #print(num_indices[nums[i]])
            arr[i] = num_indices[nums[i]] - occ[nums[i]]*i     
            num_indices[nums[i]]=num_indices[nums[i]]-2*i
            occ[nums[i]]=occ[nums[i]]-2
            
        return arr
        
arr1 = list(map(int, input().split()))
ob=Solution()
ans=ob.distance(arr1)
print(ans)

