# -*- coding: utf-8 -*-
"""prime_in_diagonal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U_QyT8VlAu2EmXdD-cmrgPjjIkgLUgvU
"""

"""
  Return the largest prime number that lies on at least one of the diagonals of nums. 
  In case, no prime is present on any of the diagonals, return 0.

  Input: nums = [[1,2,3],[5,6,7],[9,10,11]]
  Output: 11

  Input: nums = [[1,2,3],[5,17,7],[9,11,10]]
  Output: 17

"""

import math
import time
from typing import List

def is_prime(n):
    if n <= 1:
        return False
 
    max_div = math.floor(math.sqrt(n))
    for i in range(2, 1 + max_div):
        if n % i == 0:
            return False
    return True
    
class Solution:

    
    def diagonalPrime(self, nums: List[List[int]]) -> int:
        
        maxi=0
        x=len(nums[0])
        for i in range(x):
            for j in range(x):
                if i == j or j==x-i-1:
                    if(is_prime(nums[i][j])):
                        maxi=max(maxi,nums[i][j])
        return maxi

x=int(input())
final=[]
for i in range(x):
  arr1 = list(map(int, input().split()))
  final.append(arr1)

ob=Solution()
ans=ob.diagonalPrime(final)
print(ans)

