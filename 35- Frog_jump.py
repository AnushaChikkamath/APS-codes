# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U_QyT8VlAu2EmXdD-cmrgPjjIkgLUgvU
"""

"""
  Geek wants to climb from the 0th stair to the (n-1)th stair. At a time the Geek can climb either 
  one or two steps. A height[N] array is also given. Whenever the geek jumps from stair i to stair j, 
  the energy consumed in the jump is abs(height[i]- height[j]), where abs() means the absolute difference. 
  Return the minimum energy that can be used by the Geek to jump from stair 0 to stair N-1.

  Input- n = 4
         Height = {10 20 30 10}

  Output- 20


"""
class Solution:
    def minimumEnergy(self, height, n):
        if(n==1):
            return 0
        if(n==2):
            return abs(height[1]-height[0])
        dp=([0 for i in range(n)])
        dp[1]=abs(height[1]-height[0])
        
        for i in range(2,n):
            dp[i]=min(abs(height[i]-height[i-1])+dp[i-1],abs(height[i]-height[i-2])+dp[i-2])
            
        return dp[n-1]


if __name__ == '__main__':
    t = int(input())
    for _ in range(t):
        n = int(input())
        height = list(map(int, input().split()))
        ob = Solution()
        print(ob.minimumEnergy(height, n))

